apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: build-pipeline
spec:
  params:
    - description: Source Repository URL
      name: git-url
      type: string

    - description: Fully Qualified Output Image
      name: output-image
      type: string
      default: "quay.io/redhat-user-workloads/konflux-build-pipeli-tenant/bazel-builder/test-assets:ITS-$(context.pipelineRun.name)"

    - default: "main"
      description: Revision of the Source Repository
      name: revision
      type: string

    - default: .
      description: Path to the source code of an application's component from where
        to build image.
      name: path-context
      type: string

    - default: Dockerfile
      description: Path to the Dockerfile inside the context specified by parameter
        path-context
      name: dockerfile
      type: string

    - default: "false"
      description: Force rebuild image
      name: rebuild
      type: string

    - default: "false"
      description: Skip checks against built image
      name: skip-checks
      type: string

    - default: "true"
      description: Execute the build with network isolation
      name: hermetic
      type: string

    - default: ""
      description: Build dependencies to be prefetched by Cachi2
      name: prefetch-input
      type: string

    - default: "1h"
      description: Image tag expiration time, time values could be something like
        1h, 2d, 3w for hours, days, and weeks, respectively.
      name: image-expires-after
      type: string

    - default: "false"
      description: Build a source image.
      name: build-source-image
      type: string

    - default: "false"
      description: Add built image into an OCI image index
      name: build-image-index
      type: string

    - default: []
      description: Array of --build-arg values ("arg=value" strings) for buildah
      name: build-args
      type: array

    - default: ""
      description: Path to a file with build arguments for buildah, see https://www.mankier.com/1/buildah-build#--build-arg-file
      name: build-args-file
      type: string
  tasks:
  - name: build-container
    taskSpec:
      params:
      - name: IMAGE
        description: Reference of the image buildah will produce.
        type: string
      - name: BUILDER_IMAGE
        description: The location of the buildah builder image.
        default: quay.io/buildah/stable:v1
        type: string
      - name: STORAGE_DRIVER
        description: Set buildah storage driver
        default: overlay
        type: string
      - name: DOCKERFILE
        description: Path to the Dockerfile to build.
        default: ./Dockerfile
        type: string
      - name: CONTEXT
        description: Path to the directory to use as context.
        default: .
        type: string
      - name: TLSVERIFY
        description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
        default: "true"
        type: string
      - name: FORMAT
        description: The format of the built container, oci or docker
        default: "oci"
        type: string
      - name: BUILD_EXTRA_ARGS
        description: Extra parameters passed for the build command when building images. WARNING - must be sanitized to avoid command injection
        default: ""
        type: string
      - name: PUSH_EXTRA_ARGS
        description: Extra parameters passed for the push command when pushing images. WARNING - must be sanitized to avoid command injection
        type: string
        default: ""
      - name: SKIP_PUSH
        description: Skip pushing the built image
        default: "true"
        type: string
      - name: BUILD_ARGS
        description: Dockerfile build arguments, array of key=value
        type: array
        default:
        - ""
      steps:
      - name: build-and-push
        image: $(params.BUILDER_IMAGE)
        env:
        - name: PARAM_IMAGE
          value: $(params.output-image)
        - name: PARAM_STORAGE_DRIVER
          value: $(params.STORAGE_DRIVER)
        - name: PARAM_DOCKERFILE
          value: $(params.DOCKERFILE)
        - name: PARAM_CONTEXT
          value: $(params.CONTEXT)
        - name: PARAM_TLSVERIFY
          value: $(params.TLSVERIFY)
        - name: PARAM_FORMAT
          value: $(params.FORMAT)
        - name: PARAM_BUILD_EXTRA_ARGS
          value: $(params.BUILD_EXTRA_ARGS)
        - name: PARAM_PUSH_EXTRA_ARGS
          value: $(params.PUSH_EXTRA_ARGS)
        - name: PARAM_SKIP_PUSH
          value: $(params.SKIP_PUSH)
        results:
        - name: IMAGE_DIGEST
          description: Digest of the image just built.
        - name: IMAGE_URL
          description: Image repository where the built image would be pushed to
        args:
        - $(params.BUILD_ARGS[*])
        script: |
          
          # write a dockerfile to disk
          cat >./Dockerfile <<'EOF'
          FROM quay.io/konflux-ci/bazel5-ubi8:latest
          WORKDIR source
          RUN bazel build //main:hello-world
          EOF

          BUILD_ARGS=()
          for buildarg in "$@"
          do
            BUILD_ARGS+=("--build-arg=$buildarg")
          done
          [ "$(workspaces.sslcertdir.bound)" = "true" ] && CERT_DIR_FLAG="--cert-dir=$(workspaces.sslcertdir.path)"
          [ "$(workspaces.dockerconfig.bound)" = "true" ] && DOCKER_CONFIG="$(workspaces.dockerconfig.path)" && export DOCKER_CONFIG
          # build the image (CERT_DIR_FLAG should be omitted if empty and BUILD_EXTRA_ARGS can contain multiple args)
          # shellcheck disable=SC2046,SC2086
          buildah ${CERT_DIR_FLAG} "--storage-driver=${PARAM_STORAGE_DRIVER}" bud "${BUILD_ARGS[@]}" ${PARAM_BUILD_EXTRA_ARGS} \
            "--format=${PARAM_FORMAT}" "--tls-verify=${PARAM_TLSVERIFY}" \
            -f "${PARAM_DOCKERFILE}" -t "${PARAM_IMAGE}" "${PARAM_CONTEXT}"
          [ "${PARAM_SKIP_PUSH}" = "true" ] && echo "Push skipped" && exit 0
          # push the image (CERT_DIR_FLAG should be omitted if empty and PUSH_EXTRA_ARGS can contain multiple args)
          # shellcheck disable=SC2046,SC2086
          buildah ${CERT_DIR_FLAG} "--storage-driver=${PARAM_STORAGE_DRIVER}" push ${PARAM_PUSH_EXTRA_ARGS} \
            "--tls-verify=${PARAM_TLSVERIFY}" --digestfile /tmp/image-digest "${PARAM_IMAGE}" \
            "docker://${PARAM_IMAGE}"
          #tee "$(results.IMAGE_DIGEST.path)" < /tmp/image-digest
          #printf '%s' "${PARAM_IMAGE}" | tee "$(results.IMAGE_URL.path)"
