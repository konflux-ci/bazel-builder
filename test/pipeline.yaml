apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: build-pipeline
spec:
  params:
    - description: 'Snapshot of the application'
      name: SNAPSHOT
      # default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
   
    - description: Fully Qualified Output Image
      name: output-image
      type: string
      default: "quay.io/redhat-user-workloads/konflux-build-pipeli-tenant/bazel-builder/test-assets:ITS-$(context.pipelineRun.name)"

    - default: Dockerfile
      description: Path to the Dockerfile inside the context specified by parameter
        path-context
      name: dockerfile
      type: string

    - default: "false"
      description: Force rebuild image
      name: rebuild
      type: string

    - default: "false"
      description: Skip checks against built image
      name: skip-checks
      type: string

    - default: "true"
      description: Execute the build with network isolation
      name: hermetic
      type: string

    - default: ""
      description: Build dependencies to be prefetched by Cachi2
      name: prefetch-input
      type: string

    - default: "1h"
      description: Image tag expiration time, time values could be something like
        1h, 2d, 3w for hours, days, and weeks, respectively.
      name: image-expires-after
      type: string

    - default: "false"
      description: Build a source image.
      name: build-source-image
      type: string

    - default: "false"
      description: Add built image into an OCI image index
      name: build-image-index
      type: string

    - default: []
      description: Array of --build-arg values ("arg=value" strings) for buildah
      name: build-args
      type: array

    - default: ""
      description: Path to a file with build arguments for buildah, see https://www.mankier.com/1/buildah-build#--build-arg-file
      name: build-args-file
      type: string
  tasks:
  # - name: parse-snapshot
  #   results:
  #     - name: component
  #       description: Digest of the image just built.
  #   image: quay.io/konflux-ci/yq-container:latest
  - name: test-metadata
    params:
      - name: SNAPSHOT
        value: $(params.SNAPSHOT)
    taskSpec:
      params:
      - name: SNAPSHOT
        description: The JSON string of the Snapshot under test
        type: string
      results:
        - name: component-container-image
          description: image url and tag
        - name: source-trusted-artifact
          description: image url and tag for the source trusted artifact
      steps:
      - name: echo
        image: quay.io/konflux-ci/oras:latest
        securityContext:
          runAsUser: 0
        env:
          - name: COMPONENT_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['appstudio.openshift.io/component']
          - name: EVENT_TYPE
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['pac.test.appstudio.openshift.io/event-type']
          - name: SNAPSHOT
            value: $(params.SNAPSHOT)

        script: |
          #!/bin/bash
          set -ex
          set -o pipefail
        
          dnf install -y jq gettext
          echo "${SNAPSHOT}"
          export COMPONENT_CONTAINER_IMAGE=$(jq -r --arg component_name "${COMPONENT_NAME}" '.components[] | select(.name == $component_name) | .containerImage' <<< "${SNAPSHOT}")
          export COMPONENT_GIT_COMMIT=$(jq -r --arg component_name "${COMPONENT_NAME}" '.components[] | select(.name == $component_name) | .source.git.revision' <<< "${SNAPSHOT}")
          export COMPONENT_IMAGE_BASE=$(echo ${COMPONENT_CONTAINER_IMAGE} | cut -d@ -f1 )
          echo -n "${COMPONENT_CONTAINER_IMAGE}" > $(results.component-container-image.path)
          echo "event type is "$EVENT_TYPE""
          
          if [[ "$EVENT_TYPE" == "pull_request" ]]; then
            echo "pull request"
            # echo -n "${COMPONENT_IMAGE_BASE}:on-pr-${COMPONENT_GIT_COMMIT}.git" > $(results.source-trusted-artifact.path)
            source_artifact_digest=$(oras manifest fetch --pretty "${COMPONENT_IMAGE_BASE}:on-pr-${COMPONENT_GIT_COMMIT}.git" | jq -er ".layers[].digest")
          else
            echo "push"
            # echo -n "${COMPONENT_IMAGE_BASE}:${COMPONENT_GIT_COMMIT}.git" > $(results.source-trusted-artifact.path)
            source_artifact_digest=$(oras manifest fetch --pretty "${COMPONENT_IMAGE_BASE}:${COMPONENT_GIT_COMMIT}.git" | jq -er ".layers[].digest")
          fi

          echo -n "oci:$COMPONENT_IMAGE_BASE@$source_artifact_digest" > $(results.source-trusted-artifact.path)

  - name: buildah
    runAfter:
    - test-metadata
    params:
    - name: IMAGE
      value: $(params.output-image)
    - name: test-image
      value: $(tasks.test-metadata.results.component-container-image)
    - name: SOURCE_ARTIFACT
      value: $(tasks.test-metadata.results.source-trusted-artifact)
    - name: CONTEXT
      value: "test"
    - name: build-args
      value: 
      - FROM=$(tasks.test-metadata.results.component-container-image)

    taskRef:
      resolver: git
      params:
      - name: url
        value: https://github.com/konflux-ci/bazel-builder.git
      - name: revision
        value: make-integration-test-work
      - name: pathInRepo
        value: test/buildah-build-task.yaml





  # - name: buildah
  #   runAfter:
  #   - test-metadata
  #   params:
  #   - name: IMAGE
  #     value: $(params.output-image)
  #   - name: test-image
  #     value: $(tasks.test-metadata.results.component-container-image)
  #   - name: SOURCE_ARTIFACT
  #     value: $(tasks.test-metadata.results.source-trusted-artifact)
  #   - name: CONTEXT
  #     value: "/var/workdir/source/test/source"
  #   #- name: build-args
  #   #  - "FROM_IMAGE=$(tasks.test-metadata.results.component-container-image)"
  #   # taskRef:
  #   #   params:
  #   #   - name: name
  #   #     value: buildah
  #   #   - name: url
  #   #     value: https://github.com/tektoncd/catalog
  #   #   - name: revision
  #   #     value: main
  #   #   - name: pathInRepo
  #   #     value: task/buildah/0.8/buildah.yaml
  #   #   - name: kind
  #   #     value: task
  #   #   resolver: git
  #   taskSpec:
  #     description: >-
  #       Buildah task builds source into a container image and
  #       then pushes it to a container registry.

  #       Buildah Task builds source into a container image using Project Atomic's
  #       Buildah build tool.It uses Buildah's support for building from Dockerfiles,
  #       using its buildah bud command.This command executes the directives in the
  #       Dockerfile to assemble a container image, then pushes that image to a
  #       container registry.
  #     params:
  #     - name: test-image
  #       description: the location and tag of the component to test
  #       type: string
  #     - name: IMAGE
  #       description: Reference of the image buildah will produce.
  #       type: string
  #     - name: BUILDER_IMAGE
  #       description: The location of the buildah builder image.
  #       default: quay.io/konflux-ci/buildah-task:latest
  #       type: string
  #     - name: STORAGE_DRIVER
  #       description: Set buildah storage driver
  #       default: overlay
  #       type: string
  #     - name: DOCKERFILE
  #       description: Path to the Dockerfile to build.
  #       default: ./Dockerfile
  #       type: string
  #     - name: CONTEXT
  #       description: Path to the directory to use as context.
  #       default: .
  #       type: string
  #     - name: TLSVERIFY
  #       description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
  #       default: "true"
  #       type: string
  #     - name: FORMAT
  #       description: The format of the built container, oci or docker
  #       default: "oci"
  #       type: string
  #     - name: BUILD_EXTRA_ARGS
  #       description: Extra parameters passed for the build command when building images. WARNING - must be sanitized to avoid command injection
  #       default: ""
  #       type: string
  #     - name: PUSH_EXTRA_ARGS
  #       description: Extra parameters passed for the push command when pushing images. WARNING - must be sanitized to avoid command injection
  #       type: string
  #       default: ""
  #     - name: SKIP_PUSH
  #       description: Skip pushing the built image
  #       default: "true"
  #       type: string
  #     - name: BUILD_ARGS
  #       description: Dockerfile build arguments, array of key=value
  #       type: array
  #       default:
  #       - ""
  #     - name: SOURCE_ARTIFACT
  #       type: string
  #       default: ""
      
  #     workspaces:
  #     # - name: source
  #     - name: sslcertdir
  #       optional: true
  #     - name: dockerconfig
  #       description: >-
  #         An optional workspace that allows providing a .docker/config.json file
  #         for Buildah to access the container registry.
  #         The file should be placed at the root of the Workspace with name config.json.
  #       optional: true
  #     results:
  #     - name: IMAGE_DIGEST
  #       description: Digest of the image just built.
  #     - name: IMAGE_URL
  #       description: Image repository where the built image would be pushed to
  #     stepTemplate:
  #       volumeMounts:
  #       - name: varlibcontainers
  #         mountPath: /var/lib/containers
  #       - name: /var/workdir
  #         mountPath: workdir
  #     steps:
  #     - name: use-trusted-artifact
  #       image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:81c4864dae6bb11595f657be887e205262e70086a05ed16ada827fd6391926ac
  #       args:
  #         - use
  #         - $(params.SOURCE_ARTIFACT)=/var/workdir/source
  #     - name: build-and-push
  #       image: $(params.BUILDER_IMAGE)
  #       workingDir: /source
  #       env:
  #       - name: TEST_IMAGE
  #         value: $(params.test-image)
  #       - name: PARAM_IMAGE
  #         value: $(params.IMAGE)
  #       - name: PARAM_STORAGE_DRIVER
  #         value: $(params.STORAGE_DRIVER)
  #       - name: PARAM_DOCKERFILE
  #         value: $(params.DOCKERFILE)
  #       - name: PARAM_CONTEXT
  #         value: $(params.CONTEXT)
  #       - name: PARAM_TLSVERIFY
  #         value: $(params.TLSVERIFY)
  #       - name: PARAM_FORMAT
  #         value: $(params.FORMAT)
  #       - name: PARAM_BUILD_EXTRA_ARGS
  #         value: $(params.BUILD_EXTRA_ARGS)
  #       - name: PARAM_PUSH_EXTRA_ARGS
  #         value: $(params.PUSH_EXTRA_ARGS)
  #       - name: PARAM_SKIP_PUSH
  #         value: $(params.SKIP_PUSH)
  #       - name: SNAPSHOT
  #         value: $(params.SNAPSHOT)
  #       # - name: COMPONENT_NAME
  #       #   valueFrom:
  #       #     fieldRef:
  #       #       fieldPath: metadata.labels['appstudio.openshift.io/component']
  #       args:
  #       - $(params.BUILD_ARGS[*])
  #       script: |
  #         echo "Testing image: $TEST_IMAGE"

  #         # write a dockerfile to disk
  #         # this should be in source now (under /var/workdir/source)
  #         # cat >./Dockerfile <<EOF
  #         # FROM "$TEST_IMAGE"
  #         # COPY . /source
  #         # WORKDIR /source
  #         # RUN dnf -y install gcc-c++ git
  #         # RUN bazel build //main:hello-world
  #         # EOF
          
          
  #         BUILD_ARGS=()
  #         for buildarg in "$@"
  #         do
  #           BUILD_ARGS+=("--build-arg=$buildarg")
  #         done

  #         [ "$(workspaces.sslcertdir.bound)" = "true" ] && CERT_DIR_FLAG="--cert-dir=$(workspaces.sslcertdir.path)"
  #         [ "$(workspaces.dockerconfig.bound)" = "true" ] && DOCKER_CONFIG="$(workspaces.dockerconfig.path)" && export DOCKER_CONFIG
  #         # build the image (CERT_DIR_FLAG should be omitted if empty and BUILD_EXTRA_ARGS can contain multiple args)
  #         # shellcheck disable=SC2046,SC2086
  #         buildah ${CERT_DIR_FLAG} "--storage-driver=${PARAM_STORAGE_DRIVER}" bud "${BUILD_ARGS[@]}" ${PARAM_BUILD_EXTRA_ARGS} \
  #           "--format=${PARAM_FORMAT}" "--tls-verify=${PARAM_TLSVERIFY}" \
  #           -f "${PARAM_DOCKERFILE}" -t "${PARAM_IMAGE}" "${PARAM_CONTEXT}"
  #         [ "${PARAM_SKIP_PUSH}" = "true" ] && echo "Push skipped" && exit 0
  #         # push the image (CERT_DIR_FLAG should be omitted if empty and PUSH_EXTRA_ARGS can contain multiple args)
  #         # shellcheck disable=SC2046,SC2086
  #         buildah ${CERT_DIR_FLAG} "--storage-driver=${PARAM_STORAGE_DRIVER}" push ${PARAM_PUSH_EXTRA_ARGS} \
  #           "--tls-verify=${PARAM_TLSVERIFY}" --digestfile /tmp/image-digest "${PARAM_IMAGE}" \
  #           "docker://${PARAM_IMAGE}"
          
  #         # tee "$(results.IMAGE_DIGEST.path)" < /tmp/image-digest
  #         printf '%s' "${PARAM_IMAGE}" | tee "$(results.IMAGE_URL.path)"

  #       securityContext:
  #         capabilities:
  #           add:
  #           - SETFCAP
  #         # privileged: false
      # volumes:
      # - name: varlibcontainers
      #   emptyDir: {}
      # - name: workdir
      #   emptyDir: {}