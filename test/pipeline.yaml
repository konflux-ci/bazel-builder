apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: build-pipeline
spec:
  params:
    - description: 'Snapshot of the application'
      name: SNAPSHOT
      # default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
   
    - description: Fully Qualified Output Image
      name: output-image
      type: string
      default: "quay.io/redhat-user-workloads/konflux-build-pipeli-tenant/bazel-builder/test-assets:ITS-$(context.pipelineRun.name)"

    - default: Dockerfile
      description: Path to the Dockerfile inside the context specified by parameter
        path-context
      name: dockerfile
      type: string

    - default: "false"
      description: Force rebuild image
      name: rebuild
      type: string

    - default: "false"
      description: Skip checks against built image
      name: skip-checks
      type: string

    - default: "true"
      description: Execute the build with network isolation
      name: hermetic
      type: string

    - default: ""
      description: Build dependencies to be prefetched by Cachi2
      name: prefetch-input
      type: string

    - default: "1h"
      description: Image tag expiration time, time values could be something like
        1h, 2d, 3w for hours, days, and weeks, respectively.
      name: image-expires-after
      type: string

    - default: "false"
      description: Build a source image.
      name: build-source-image
      type: string

    - default: "false"
      description: Add built image into an OCI image index
      name: build-image-index
      type: string

    - default: ""
      description: Path to a file with build arguments for buildah, see https://www.mankier.com/1/buildah-build#--build-arg-file
      name: build-args-file
      type: string

  tasks:
  - name: test-metadata
    params:
      - name: SNAPSHOT
        value: $(params.SNAPSHOT)
  
    taskSpec:
      params:
      - name: SNAPSHOT
        description: The JSON string of the Snapshot under test
        type: string
      results:
        - name: component-container-image
          description: image url and tag
        - name: source-trusted-artifact
          description: image url and tag for the source trusted artifact
      steps:
      - name: echo
        image: quay.io/konflux-ci/oras:latest
        securityContext:
          runAsUser: 0
        env:
          - name: COMPONENT_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['appstudio.openshift.io/component']
          - name: SOURCE_BRANCH
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['pac.test.appstudio.openshift.io/source-branch']
          
          - name: TARGET_BRANCH
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['build.appstudio.redhat.com/target_branch']
          
          - name: EVENT_TYPE
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['pac.test.appstudio.openshift.io/event-type']
          - name: SNAPSHOT
            value: $(params.SNAPSHOT)

        script: |
          #!/bin/bash
          set -ex
          set -o pipefail
        
          microdnf install -y jq gettext
          echo "${SNAPSHOT}"
          export COMPONENT_CONTAINER_IMAGE=$(jq -r --arg component_name "${COMPONENT_NAME}" '.components[] | select(.name == $component_name) | .containerImage' <<< "${SNAPSHOT}")
          export COMPONENT_GIT_COMMIT=$(jq -r --arg component_name "${COMPONENT_NAME}" '.components[] | select(.name == $component_name) | .source.git.revision' <<< "${SNAPSHOT}")
          export COMPONENT_IMAGE_BASE=$(echo ${COMPONENT_CONTAINER_IMAGE} | cut -d@ -f1 )
          echo -n "${COMPONENT_CONTAINER_IMAGE}" > $(results.component-container-image.path)
          echo "event type is "$EVENT_TYPE""
          
          # if [[ "$EVENT_TYPE" == "pull_request" ]]; then

          # if [[ "$SOURCE_BRANCH" == "$TARGET_BRANCH" ]]; then
          if [[ $EVENT_TYPE == "push" ]]; then
            echo "fetch source_artifact_digest for push..."
            source_artifact_digest=$(oras manifest fetch --pretty "${COMPONENT_IMAGE_BASE}:${COMPONENT_GIT_COMMIT}.git" | jq -er ".layers[].digest")
          else
            echo "fetch source_artifact_digest for pull request..."
            source_artifact_digest=$(oras manifest fetch --pretty "${COMPONENT_IMAGE_BASE}:on-pr-${COMPONENT_GIT_COMMIT}.git" | jq -er ".layers[].digest")
          fi 

          echo -n "oci:$COMPONENT_IMAGE_BASE@$source_artifact_digest" > $(results.source-trusted-artifact.path)

  - name: buildah
    runAfter:
    - test-metadata
    params:
    - name: IMAGE
      value: $(params.output-image)
    - name: test-image
      value: $(tasks.test-metadata.results.component-container-image)
    - name: SOURCE_ARTIFACT
      value: $(tasks.test-metadata.results.source-trusted-artifact)
    - name: CONTEXT
      value: "test"
    - name: BUILD_ARGS
      value: 
      - "FROM=$(tasks.test-metadata.results.component-container-image)"

    taskRef:
      resolver: git
      params:
      - name: url
        value: https://github.com/konflux-ci/bazel-builder.git
      - name: revision
        value: main
      - name: pathInRepo
        value: test/buildah-build-task.yaml
